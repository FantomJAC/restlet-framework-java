<?xml version="1.0"?>

<!-- =========================================================
     Restlet build script - Copyright 2005-2012 Restlet S.A.S.
     ========================================================= -->

<project name="Restlet" default="rebuild">
	<!-- ============================ -->
	<!-- ===  Properties setting  === -->
	<!-- ============================ -->

	<!-- Load system specific properties -->
	<property file="custom.properties" />

	<!-- Load default properties -->
	<property file="build.properties" />

	<!-- Library properties -->
	<property file="libraries.properties" />

	<!-- Module properties -->
	<property file="modules.properties" />

	<!-- Edition properties -->
	<property file="edition.properties" />

	<!-- General properties -->
	<property name="author" value="Jerome Louvel" />
	<property name="vendor" value="Restlet S.A.S." />
	<property name="excludes" value="**/.emptyDir **/package.html **/overview.html" />
	<property name="mod-maven-groupId" value="org.restlet.${edition}" />

	<!-- Miscellaneous Maven properties -->
	<property name="parent-maven-groupId" value="org.restlet.${edition}" />
	<property name="parent-maven-artifactId" value="org.restlet.parent" />
	<property name="parent-maven-version" value="${version-maven}" />
	<property name="dist-path" value="restlet-${edition}-${version-compact}" />
	<property name="final-dist-path" value="restlet-${version-compact}" />
	<property name="jdk1.4-home" value="jdk1.4-home" />

	<!-- Location properties -->
	<property name="tools" location="../../tools" />
	<property name="bin" location="../../bin" />
	<property name="tmpl" location="../../tmpl" />
	<property name="libs" location="../../../libraries" />
	<property name="mods" location="../../../modules" />
	<property name="temp" location="${basedir}/temp" />
	<property name="temp-base" location="../../temp" />
	<property name="dist-base" location="dist" />
	<property name="final-dist-base" location="../../dist" />
	<property name="images" location="../../images" />
	<property name="pom-mods" location="modules" />
	<property name="mod" location="modules" />
	<property name="poms" location="poms" />

	<property name="dist-classic" location="${dist-base}/classic/${dist-path}" />
	<property name="dist-eclipse" location="${dist-base}/eclipse/${dist-path}" />
	<property name="dist-maven2" location="${dist-base}/maven2/${dist-path}" />
	<property name="dist-p2" location="${dist-base}/p2/${dist-path}" />
	<property name="classes" location="${temp}/classes" />
	<property name="docs" location="${temp}/docs" />
	<property name="docs-api" location="${docs}/api" />
	<property name="docs-engine" location="${docs}/engine" />
	<property name="docs-ext" location="${docs}/ext" />
	<property name="uml-reports" location="${temp}/uml-reports" />
	<property name="uml-reports-api" location="${uml-reports}/api" />
	<property name="icons" location="${images}/ico" />
	<property name="final-dist-classic" location="${final-dist-base}/classic/${final-dist-path}/${edition}" />
	<property name="final-dist-eclipse" location="${final-dist-base}/eclipse/${final-dist-path}/${edition}" />
	<property name="final-dist-maven2" location="${final-dist-base}/maven2/${final-dist-path}" />
	<property name="final-dist-p2" location="${final-dist-base}/p2/${final-dist-path}" />

	<!-- Boot classpath propertiesLoad system specific paths -->
	<pathconvert property="defaultbootclasspath">
		<path path="${sun.boot.class.path}" />
	</pathconvert>

	<pathconvert property="backportbootclasspath">
		<path>
			<pathelement location="${tools}/retrotranslator/rowset.jar" />
			<pathelement location="${tools}/retrotranslator/xerces.jar" />
		</path>
		<path path="${sun.boot.class.path}" />
	</pathconvert>

	<!-- Create the time stamp -->
	<tstamp>
		<format property="release-date" pattern="yyyy-MM-dd" />
	</tstamp>

	<!-- Current year -->
	<tstamp>
		<format property="current-year" pattern="yyyy" />
	</tstamp>

	<!-- Used for all string replacement operations  -->
	<echo file="filterset.properties">
		version-full: ${version-full}
		version-compact: ${version-compact}
		version-minor: ${version-minor}
		release-date: ${release-date}
		icons-dir: ${icons}
		images-dir: ${images}
		license-dir: ${dist-classic}
		dist: ${dist-classic}
		dist-base: ${dist-base}
		edition: ${edition}
		edition-full-label: ${edition-full-label}
		edition-medium-label: ${edition-medium-label}
		edition-short-label: ${edition-short-label}	
		parent-group-id: ${parent-maven-groupId}
		parent-artifact-id: ${parent-maven-artifactId}
		parent-version: ${parent-maven-version}
		group-id: ${mod-maven-groupId}
	</echo>

	<condition property="ant-old">
		<not>
			<or>
				<contains string="${ant.version}" substring="Ant version 1.7" />
				<contains string="${ant.version}" substring="Ant version 1.8" />
			</or>
		</not>
	</condition>


	<!-- Set the property that will enable the Weave target -->
	<condition property="do-backport">
		<istrue value="${backport}" />
	</condition>

	<condition property="custombootclasspath" value="${backportbootclasspath}" else="${defaultbootclasspath}">
		<istrue value="${backport}" />
	</condition>

	<!-- Set the property that will enable the Javadoc target -->
	<condition property="do-javadoc">
		<istrue value="${javadoc}" />
	</condition>

	<!-- Set the property that will enable the FindBugs target -->
	<condition property="do-findbugs">
		<and>
			<istrue value="${findbugs}" />
			<istrue value="${verify}" />
		</and>
	</condition>

	<!-- Set the property that will enable the CheckStyle target -->
	<condition property="do-checkstyle">
		<and>
			<istrue value="${checkstyle}" />
			<istrue value="${verify}" />
		</and>
	</condition>

	<!-- Set the property that will enable the Nsis target -->
	<condition property="do-nsis">
		<and>
			<istrue value="${nsis}" />
			<istrue value="${package}" />
		</and>
	</condition>

	<!-- Set the property that will enable the stage-maven target -->
	<condition property="do-maven">
		<istrue value="${maven}" />
	</condition>

	<!-- Set the property that will enable the verify target -->
	<condition property="do-verify">
		<and>
			<istrue value="${verify}" />
			<isset property="mod-core-test-id" />
		</and>
	</condition>

	<!-- Set the property that will enable the package target -->
	<condition property="do-package">
		<istrue value="${package}" />
	</condition>

	<!-- Set the property that will enable the stage-p2 target -->
	<condition property="do-p2">
		<and>
			<istrue value="${p2}" />
			<isset property="modules-p2" />
			<isset property="libraries-p2" />
		</and>
	</condition>

	
	<!-- Set the property that will enable the package target -->
	<condition property="do-package-p2">
		<and>
			<istrue value="${do-p2}" />
			<istrue value="${package}" />
		</and>
	</condition>
	
	<!-- Set the property that will enable the generation of the Javadoc of implementation classes -->
	<condition property="exclude-packages" value="">
		<isfalse value="${javadoc-hide}" />
	</condition>
	<condition property="exclude-packages" value="**.internal.*">
		<istrue value="${javadoc-hide}" />
	</condition>

	<!-- Set the debug level property -->
	<condition property="debuglevel" value="source,lines,vars">
		<and>
			<istrue value="${debug-source}" />
			<istrue value="${debug-lines}" />
			<istrue value="${debug-vars}" />
		</and>
	</condition>
	<condition property="debuglevel" value="source,lines">
		<and>
			<istrue value="${debug-source}" />
			<istrue value="${debug-lines}" />
			<isfalse value="${debug-vars}" />
		</and>
	</condition>
	<condition property="debuglevel" value="source,vars">
		<and>
			<istrue value="${debug-source}" />
			<isfalse value="${debug-lines}" />
			<istrue value="${debug-vars}" />
		</and>
	</condition>
	<condition property="debuglevel" value="lines,vars">
		<and>
			<isfalse value="${debug-source}" />
			<istrue value="${debug-lines}" />
			<istrue value="${debug-vars}" />
		</and>
	</condition>
	<condition property="debuglevel" value="lines">
		<and>
			<isfalse value="${debug-source}" />
			<istrue value="${debug-lines}" />
			<isfalse value="${debug-vars}" />
		</and>
	</condition>
	<condition property="debuglevel" value="vars">
		<and>
			<isfalse value="${debug-source}" />
			<isfalse value="${debug-lines}" />
			<istrue value="${debug-vars}" />
		</and>
	</condition>


	<!-- ======================= -->
	<!-- ===  Paths setting  === -->
	<!-- ======================= -->

	<!-- Include the definition of paths regarding edition modules -->
	<!-- @paths@ -->
	<path id="path-none" />
	<path id="forge-path">
		<fileset dir="${tools}/forge" includes="**/*.jar" />
	</path>

	<!-- =================== -->
	<!-- ===  Ant Tasks  === -->
	<!-- =================== -->

	<!-- Retrotranslator 1.2.0 -->
	<taskdef name="retrotranslator" classname="net.sf.retrotranslator.transformer.RetrotranslatorTask">
		<classpath>
			<pathelement location="${tools}/retrotranslator/retrotranslator-transformer-1.2.7.jar" />
			<pathelement location="${tools}/retrotranslator/retrotranslator-runtime-1.2.7.jar" />
		</classpath>
	</taskdef>

	<!-- Findbugs -->
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		<classpath>
			<pathelement location="${tools}/findbugs/lib/findbugs-ant.jar" />
		</classpath>
	</taskdef>

	<!-- Checkstyle -->
	<taskdef resource="checkstyletask.properties">
		<classpath>
			<pathelement location="${tools}/checkstyle/checkstyle-all-4.2.jar" />
		</classpath>
	</taskdef>

	<!-- NSIS 1.3 -->
	<taskdef name="nsis" classname="net.sf.nsisant.Task">
		<classpath>
			<pathelement location="${tools}/nsis/nsisant-1.3.custom.jar" />
		</classpath>
	</taskdef>

	<!-- Ant Contrib -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<fileset dir="${tools}/ant-contrib" includes="**/*.jar" />
		</classpath>
	</taskdef>

	<!-- FMPP (FreeMarker-based text file PreProcessor) -->
	<taskdef name="fmpp" classname="fmpp.tools.AntTask">
		<classpath>
			<fileset dir="${tools}/fmpp" includes="**/*.jar" />
			<fileset dir="${tools}/forge" includes="**/*.jar" />
		</classpath>
	</taskdef>
	<!-- Gae Code checker -->
	<taskdef name="gaeCodeChecker" classname="codeChecker.GaeCodeChecker">
		<classpath>
			<fileset dir="${tools}/forge" includes="**/*.jar" />
		</classpath>
	</taskdef>

	<!-- ==================== -->
	<!-- ===  Ant Macros  === -->
	<!-- ==================== -->

	<!-- Compile using preferences -->
	<macrodef name="compile">
		<attribute name="source" default="1.5" />
		<attribute name="target" default="1.5" />
		<attribute name="debug" default="${debug}" />
		<attribute name="debuglevel" default="${debuglevel}" />
		<attribute name="optimize" default="${optimize}" />
		<attribute name="srcdir" />
		<attribute name="destdir" />
		<attribute name="classpathref" default="path-none" />
		<attribute name="includes" default="*/**" />
		<attribute name="excludes" default="" />
		<attribute name="verbose" default="${verbose}" />
		<sequential>
			<mkdir dir="@{destdir}" />
			<javac target="@{target}" source="@{source}" debug="@{debug}" deprecation="false" encoding="UTF-8" debuglevel="@{debuglevel}" optimize="@{optimize}" verbose="@{verbose}" srcdir="@{srcdir}" destdir="@{destdir}" includes="@{includes}" excludes="@{excludes}" bootclasspath="${custombootclasspath}" includeantruntime="false">
				<classpath refid="@{classpathref}" />
			</javac>
		</sequential>
	</macrodef>

	<macrodef name="gwtCompileModule">
		<attribute name="name" />
		<attribute name="module" />
		<sequential>
			<java classname="com.google.gwt.dev.Compiler" fork="true" failonerror="true">
				<classpath>
					<path refid="mod-@{name}-path">
					</path>
					<pathelement path="${mod}/${mod-@{name}-id}/src" />
				</classpath>
				<arg value="-validateOnly" />
				<arg value="-strict" />
				<arg value="@{module}" />
			</java>
		</sequential>
	</macrodef>

	<!-- Compile a module -->
	<macrodef name="compileModule">
		<attribute name="name" />
		<sequential>
			<compile srcdir="${mod}/${mod-@{name}-id}/src" destdir="${classes}/${mod-@{name}-id}" classpathref="mod-@{name}-path" excludes="${mod-@{name}-compile-excludes}" />
		</sequential>
	</macrodef>

	<!-- Package a module -->
	<macrodef name="stageModule">
		<attribute name="name" />
		<attribute name="includeSource" default="false" />
		<sequential>
			<!-- Create the Manifest by merging the Eclipse plugin Manifest and the default JAR's one -->
			<mkdir dir="${temp}/jar/META-INF" />
			<delete failonerror="false" file="${temp}/jar/META-INF/MANIFEST.MF" />
			<copy failonerror="false" file="${mod}/${mod-@{name}-id}/META-INF/MANIFEST.MF" tofile="${temp}/jar/META-INF/MANIFEST.MF" />

			<condition property="include-@{name}-pattern" value="org/restlet/test/**">
				<equals arg1="@{name}" arg2="core-test"/>
			</condition>
			<condition property="include-@{name}-pattern" value="org/restlet/**">
				<equals arg1="@{name}" arg2="core" />
			</condition>
			<property name="include-@{name}-pattern" value="org/restlet/ext/@{name}/**" />
			<dirset id="mod-@{name}-exported-packages" dir="${classes}/${mod-@{name}-id}">
				<include name="${include-@{name}-pattern}" />
				<!-- <exclude name="**/internal/**" /> -->
			</dirset>
			<pathconvert pathsep="," dirsep="." property="mod-@{name}-export-package" refid="mod-@{name}-exported-packages">
				<map from="${classes}/${mod-@{name}-id}/" to='' />
			</pathconvert>
			<manifest file="${temp}/jar/META-INF/MANIFEST.MF" mode="update">
				<attribute id="Export-Package" name="Export-Package" value="${mod-@{name}-export-package}" />
				<attribute id="Bundle-SymbolicName" name="Bundle-SymbolicName" value="${mod-@{name}-id}" />
				<attribute id="Bundle-Version" name="Bundle-Version" value="${eclipse-version-full}" />
				<section name="${mod-@{name}-id}">
					<attribute name="Implementation-Title" value="${mod-@{name}-id}" />
					<attribute name="Implementation-Version" value="${version-full} (build ${build.number})" />
					<attribute name="Implementation-Vendor" value="${vendor}" />
				</section>
			</manifest>

			<!-- Create plugin jar -->
			<mkdir dir="${dist-classic}/lib" />

			<condition property="source-exclude-patterns" value="**/package.html, **/*.java">
				<equals arg1="@{includeSource}" arg2="false" />
			</condition>
			<property name="source-exclude-patterns" value="**/package.html" />

			<mkdir dir="${temp}/jar-extras/@{name}" />
			<property name="jar-extras" value="${temp}/jar-extras/@{name}" />

			<delete failonerror="false" file="${dist-classic}/lib/${mod-@{name}-id}.jar" />
			<jar destfile="${dist-classic}/lib/${mod-@{name}-id}.jar" filesetmanifest="merge">
				<fileset dir="${classes}/${mod-@{name}-id}" />
				<fileset dir="${temp}/jar/" />
				<fileset dir="${jar-extras}" />
				<fileset dir="${mod}/${mod-@{name}-id}/src" excludes="${source-exclude-patterns}" />
			</jar>
			<!-- Create extension source jar file -->
			<mkdir dir="${dist-classic}/src" />
			<copy todir="${dist-classic}/src/${mod-@{name}-id}">
				<fileset dir="${mod}/${mod-@{name}-id}/src" excludes="${excludes}" />
			</copy>
			<var name="source-exclude-patterns" unset="true" />
			<var name="jar-extras" unset="true" />
		</sequential>
	</macrodef>

	<!-- Find bugs in a module -->
	<macrodef name="findbugsModule">
		<attribute name="name" />
		<sequential>
			<findbugs debug="false" home="${tools}/findbugs" output="html" outputFile="${temp}/findbugs/${mod-@{name}-id}-fb.html">
				<auxClasspath refid="mod-@{name}-path" />
				<sourcePath path="${mod}/${mod-@{name}-id}/src" />
				<class location="${classes}/${mod-@{name}-id}" />
			</findbugs>
		</sequential>
	</macrodef>

	<!-- Check style of a module -->
	<macrodef name="checkstyleModule">
		<attribute name="name" />
		<sequential>
			<checkstyle config="checks.xml" failOnViolation="false">
				<fileset dir="${mod}/${mod-@{name}-id}/src" includes="**/*.java" />
				<!-- Location of cache-file. Something that is project specific -->
				<property key="checkstyle.cache.file" file="${temp}/checkstyle/cachefile" />
				<formatter type="xml" tofile="${temp}/checkstyle/${mod-@{name}-id}-cs.xml" />
			</checkstyle>
			<xslt in="${temp}/checkstyle/${mod-@{name}-id}-cs.xml" out="${temp}/checkstyle/${mod-@{name}-id}-cs.html" style="checks.xsl" />
		</sequential>
	</macrodef>

	<!-- Backport a module -->
	<macrodef name="backportModule">
		<attribute name="name" />
		<attribute name="failonwarning" default="true" />
		<sequential>
			<path id="backport-@{name}-classpath">
				<dirset dir="${classes}" />
				<path refid="mod-@{name}-path" />
				<fileset dir="${tools}/retrotranslator">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${jdk1.4-home}/jre/lib">
					<filename name="*.jar" />
				</fileset>
			</path>
			<pathconvert property="backport-@{name}-jarfiles" refid="backport-@{name}-classpath" />

			<retrotranslator verify="true" classpath="${backport-@{name}-jarfiles}" failonwarning="@{failonwarning}" backport="javax.security.auth.login.CredentialException:javax.security.auth.login.LoginException" smart="true" support="Thread.setUncaughtExceptionHandler;URLConnection.setConnectTimeout;URLConnection.setReadTimeout;HttpURLConnection.setFixedLengthStreamingMode;HttpURLConnection.setChunkedStreamingMode">
				<!-- Caution: Overrides the Java 1.5 generated classes -->
				<fileset dir="${classes}/${mod-@{name}-id}">
					<include name="**/*.class" />
				</fileset>
			</retrotranslator>
		</sequential>
	</macrodef>

	<!-- Package a library -->
	<macrodef name="stageLibrary">
		<!-- Package a library -->
		<attribute name="name" />
		<sequential>
			<!-- Create a destination directory -->
			<mkdir dir="${dist-classic}/lib/${lib-@{name}-root}" />

			<!-- Copy all library content into the destination folder -->
			<copy todir="${dist-classic}/lib/${lib-@{name}-root}">
				<fileset dir="${libs}/${lib-@{name}-root}" excludes="bin, .classpath, .project, build.properties" />
			</copy>
		</sequential>
	</macrodef>

	<!-- Generate the Maven 2.x files for a hosted library -->
	<macrodef name="maven2Library">
		<attribute name="name" />
		<sequential>
			<propertyregex property="lib-dir-@{name}-maven-groupId" input="${lib-@{name}-maven-groupId}" regexp="\." replace="/" global="true" casesensitive="false" />
			<property name="lib-dir-@{name}-maven" value="${dist-maven2}/${lib-dir-@{name}-maven-groupId}/${lib-@{name}-maven-artifactId}/${lib-@{name}-maven-version}" />
			<mkdir dir="${lib-dir-@{name}-maven}" />

			<copy file="${libs}/${lib-@{name}-root}/${lib-@{name}-package}.jar" tofile="${lib-dir-@{name}-maven}/${lib-@{name}-maven-artifactId}-${lib-@{name}-maven-version}.jar" overwrite="true" />
			<copy file="${poms}/${lib-@{name}-package}.pom" tofile="${lib-dir-@{name}-maven}/${lib-@{name}-maven-artifactId}-${lib-@{name}-maven-version}.pom" overwrite="true" />
			<checksum file="${lib-dir-@{name}-maven}/${lib-@{name}-maven-artifactId}-${lib-@{name}-maven-version}.jar" algorithm="MD5" fileext=".md5" />
			<checksum file="${lib-dir-@{name}-maven}/${lib-@{name}-maven-artifactId}-${lib-@{name}-maven-version}.jar" algorithm="SHA" fileext=".sha1" />
			<checksum file="${lib-dir-@{name}-maven}/${lib-@{name}-maven-artifactId}-${lib-@{name}-maven-version}.pom" algorithm="MD5" fileext=".md5" />
			<checksum file="${lib-dir-@{name}-maven}/${lib-@{name}-maven-artifactId}-${lib-@{name}-maven-version}.pom" algorithm="SHA" fileext=".sha1" />
		</sequential>
	</macrodef>

	<macrodef name="maven2Module">
		<attribute name="name" />
		<sequential>
			<propertyregex property="mod-dir-maven-groupId" input="${mod-maven-groupId}" regexp="\." replace="/" global="true" casesensitive="false" />

			<!-- All files generated from the modules are stamped with the current full version number -->
			<property name="mod-dir-@{name}-maven" value="${dist-maven2}/${mod-dir-maven-groupId}/${mod-@{name}-id}/${version-maven}" />
			<mkdir dir="${mod-dir-@{name}-maven}" />

			<copy file="${dist-classic}/lib/${mod-@{name}-id}.jar" tofile="${mod-dir-@{name}-maven}/${mod-@{name}-id}-${version-maven}.jar" overwrite="true" />

			<jar destfile="${mod-dir-@{name}-maven}/${mod-@{name}-id}-${version-maven}-sources.jar" filesetmanifest="merge">
				<fileset dir="${mod}/${mod-@{name}-id}/src" includes="**/*" />
			</jar>

			<copy file="${poms}/${mod-@{name}-id}.pom" tofile="${mod-dir-@{name}-maven}/${mod-@{name}-id}-${version-maven}.pom" overwrite="true" />
			<checksum file="${mod-dir-@{name}-maven}/${mod-@{name}-id}-${version-maven}.jar" algorithm="MD5" fileext=".md5" />
			<checksum file="${mod-dir-@{name}-maven}/${mod-@{name}-id}-${version-maven}.jar" algorithm="SHA" fileext=".sha1" />
			<checksum file="${mod-dir-@{name}-maven}/${mod-@{name}-id}-${version-maven}-sources.jar" algorithm="MD5" fileext=".md5" />
			<checksum file="${mod-dir-@{name}-maven}/${mod-@{name}-id}-${version-maven}-sources.jar" algorithm="SHA" fileext=".sha1" />
			<checksum file="${mod-dir-@{name}-maven}/${mod-@{name}-id}-${version-maven}.pom" algorithm="MD5" fileext=".md5" />
			<checksum file="${mod-dir-@{name}-maven}/${mod-@{name}-id}-${version-maven}.pom" algorithm="SHA" fileext=".sha1" />
		</sequential>
	</macrodef>

	<macrodef name="p22Module">
		<attribute name="name" />
		<sequential>
			<!-- Generation of bundle and feature. -->
			<copy file="${dist-classic}/lib/${mod-@{name}-id}.jar" tofile="${dist-p2}/plugins/${mod-@{name}-id}_${eclipse-version-full}.jar" />
			<copy file="p2/feature.@{name}.xml" tofile="${dist-p2}/features/feature.xml" />
			<zip destfile="${dist-p2}/features/${mod-@{name}-id}_${eclipse-version-full}.jar" basedir="${dist-p2}/features" includes="feature.xml" update="false" />
			<delete file="${dist-p2}/features/feature.xml" />
			<!-- Generation of source bundle. -->
			<delete dir="${temp}/@{name}" />
			<mkdir dir="${temp}/@{name}"/>
			<copy todir="${temp}/@{name}" overwrite="true" >
				<fileset dir="${mod}/${mod-@{name}-id}/src"/>
			</copy>

			<mkdir dir="${temp}/@{name}/META-INF"/>
			<manifest file="${temp}/@{name}/META-INF/MANIFEST.MF" mode="replace">
				<attribute id="Eclipse-SourceBundle" name="Eclipse-SourceBundle" value="${mod-@{name}-id};version=${eclipse-version-full}" />
				<attribute id="Bundle-SymbolicName" name="Bundle-SymbolicName" value="${mod-@{name}-id}.source" />
				<attribute id="Bundle-Version" name="Bundle-Version" value="${eclipse-version-full}" />
			</manifest>
			<zip destfile="${dist-p2}/plugins/${mod-@{name}-id}.source_${eclipse-version-full}.jar" basedir="${temp}/@{name}" update="false" />
			<delete dir="${temp}/@{name}" />
		</sequential>
	</macrodef>
	
	<macrodef name="p22Library">
		<attribute name="name" />
		<sequential>
			<copy todir="${dist-p2}/plugins" overwrite="true">
				<fileset dir="${temp-base}/p2/${lib-@{name}-root}"/>
				<mapper type="glob" from="*.jar" to="*_${eclipse-version-full}.jar"/>
			</copy>
		</sequential>
	</macrodef>

	<!-- ===================== -->
	<!-- ===  Ant Targets  === -->
	<!-- ===================== -->

	<!-- GENERAL targets -->
	<target name="build" depends="generate, verify, integrate, stage, package" description="Full build." />
	<target name="rebuild" depends="clean, generate, verify, integrate, stage, package" description="Full build from scratch." />

	<!-- CLEAN target -->
	<target name="clean" depends="clean-temp, clean-dist" description="Clean the staging area." />

	<!-- CLEAN-DIST target -->
	<target name="clean-dist" description="Clean distributions files.">
		<delete includeEmptyDirs="true" verbose="false" quiet="false" failonerror="false">
			<fileset dir="${dist-base}">
				<include name="*/${dist-path}/**/*" />
				<include name="*/${dist-path}" />
			</fileset>
		</delete>
	</target>

	<!-- CLEAN-TEMP target -->
	<target name="clean-temp" description="Clean temporary build files.">
		<!-- Delete the classes and Javadoc directories -->
		<delete includeEmptyDirs="true" verbose="false" quiet="false" failonerror="false">
			<fileset dir="${temp}" />
		</delete>
	</target>

	<!-- GENERATE target -->
	<target name="generate" depends="generate-classes, generate-backport, generate-templates, generate-javadocs" description="Generate files." />

	<target name="generate-sources" description="Generate the sources.">
		<!-- @generate-sources@ -->
	</target>

	<target name="generate-templates" description="Generate template-based files.">
		<!-- Generate the Changes file -->
		<copy file="${tmpl}/text/changes.txt" todir="${docs}" overwrite="true">
			<filterset begintoken="@" endtoken="@" filtersfile="filterset.properties" />
		</copy>

		<!-- Generate the NSIS files -->
		<copy file="${tmpl}/nsis/common.nsh" todir="${temp}" overwrite="true" />
		<copy file="${tmpl}/nsis/setup.nsi" todir="${temp}" overwrite="true">
			<filterset begintoken="@" endtoken="@" filtersfile="filterset.properties" />
		</copy>

		<!-- Generate the javadocs overview files -->
		<copy todir="${temp}/javadocs" overwrite="true">
			<fileset dir="${tmpl}/javadocs" includes="*.tmpl" />
			<globmapper from="*.tmpl" to="*.html" />
			<filterset begintoken="@" endtoken="@" filtersfile="filterset.properties" />
		</copy>
	</target>

	<!-- COMPILE target -->
	<target name="generate-classes" description="Compile the Java source files.">
		<mkdir dir="${classes}" />
		<for param="module" delimiter=" " list="${modules-sorted-by-dep}">
			<sequential>
				<compileModule name="@{module}" />
				<!-- @generate-classes-extras@ -->
			</sequential>
		</for>
	</target>

	<!-- GENERATE-BACKPORT target -->
	<target name="generate-backport" if="do-backport" depends="generate-classes" description="Backport classes using Retrotranslator.">
		<for param="module" delimiter=" " list="${modules}">
			<sequential>
				<backportModule name="@{module}" failonwarning="@{backport-failonwarning}" />
			</sequential>
		</for>
	</target>

	<target name="generate-javadocs" if="do-javadoc" depends="generate-classes" description="Generate the Javadocs.">
		<!-- @generate-javadocs@ -->
	</target>

	<!-- umlgraph target -->
	<target name="umlgraph">
		<!-- Generate UML graphics for the Restlet API -->
		<javadoc packagenames="org.restlet.*" excludepackagenames="${exclude-packages}" destdir="${uml-reports-api}" classpathref="path-all" author="true" version="true" use="true" windowtitle="Restlet API ${version-full}" doctitle="Restlet API ${version-full}" overview="${temp}/javadocs/overview-api.html" stylesheetfile="${tmpl}/javadocs/stylesheet.css" verbose="${verbose}">
			<sourcepath>
				<pathelement path="${mod}/${mod-core-id}/src/" />
			</sourcepath>

			<bottom>Copyright &#169; 2005-2012 Restlet S.A.S.</bottom>

			<group title="Restlet API">
				<package name="org.restlet*" />
			</group>

			<link href="http://download.oracle.com/javase/1.5.0/docs/api/" />
			<doclet name="org.umlgraph.doclet.UmlGraphDoc" path="${tools}/umlgraph/umlgraph.jar">
				<param name="-attributes" />
				<param name="-operations" />
				<param name="-qualify" />
				<param name="-types" />
				<param name="-visibility" />
			</doclet>
		</javadoc>
		<apply executable="dot" dest="${uml-reports-api}" parallel="false" failifexecutionfails="false" failonerror="false" verbose="false">
			<arg value="-Tpng" />
			<arg value="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${uml-reports-api}" includes="*.dot" />
			<mapper type="glob" from="*.dot" to="*.png" />
		</apply>
		<delete verbose="false" quiet="true">
			<fileset dir="${uml-reports-api}" includes="**/*.dot, **/*.map" />
		</delete>
	</target>

	<!-- VERIFY target -->
	<target name="verify" if="do-verify" depends="verify-ant, verify-tests, verify-findbugs, verify-checkstyle" description="Verify build." />

	<target name="verify-ant" if="ant-old" description="Check the Ant version for potential issues with JUnit.">
		<echo message="For easier integration with JUnit, we recommand usage of Ant 1.7 or higher." />
		<echo message="Otherwise, make sure that you have JUnit's JAR into you Ant's lib directory." />
		<echo message="Current version: ${ant.version}" />
	</target>

	<target name="verify-tests" if="do-verify" depends="verify-ant" description="Execute the tests suites.">
		<mkdir dir="${temp}/test" />

		<echo>See the JUnit log file for more details: ${temp}/test/TEST-org.restlet.test.RestletTestSuite.txt.</echo>
		<junit printsummary="true" fork="true" timeout="60000" haltonfailure="false" haltonerror="false" filtertrace="true" showoutput="${verbose}" errorproperty="errorprop" failureproperty="failprop">
			<classpath>
				<path location="${mod}/${mod-core-test-id}/src" />
				<path refid="mod-core-test-path" />
			</classpath>
			<formatter type="plain" />
			<test name="org.restlet.test.RestletTestSuite" todir="${temp}/test" />
		</junit>

		<fail if="failprop" message="At least one failure during junit tests." taskname="verify-tests" />
		<fail if="errorprop" message="At least one error during junit tests." taskname="verify-tests" />
	</target>

	<target name="verify-findbugs" if="do-findbugs" description="Attempts to find bugs.">
		<mkdir dir="${temp}/findbugs" />
		<for param="module" delimiter=" " list="${modules}">
			<sequential>
				<findbugsModule name="${module" />
			</sequential>
		</for>
	</target>

	<target name="verify-checkstyle" if="do-checkstyle" description="Check the style of the code.">
		<mkdir dir="${temp}/checkstyle" />
		<for param="module" delimiter=" " list="${modules}">
			<sequential>
				<checkstyleModule name="${module" />
			</sequential>
		</for>
	</target>

	<!-- Integrate target -->
	<target name="integrate" depends="" description="Integrate files from other projects." />

	<!-- STAGE target -->
	<target name="stage" description="Stage the packaging step." >
		<antcall target="stage-classic" />
		<antcall target="stage-maven" />
		<antcall target="stage-p2" />
	</target>

	<!-- STAGE-CLASSIC target (Stage the packaging step) -->
	<target name="stage-classic" description="Stage the packaging step of classic distribution.">
		<!-- Prepare distribution directories -->
		<delete dir="${dist-classic}" verbose="false" quiet="true" includeEmptyDirs="true" />
		<mkdir dir="${dist-classic}/lib" />
		<!-- <mkdir dir="${dist-classic}/lib/poms" /> -->
		<mkdir dir="${dist-classic}/src" />

		<!-- Copy the binaries -->
		<if>
			<equals arg1="${edition}" arg2="jse" />
			<then>
				<mkdir dir="${dist-classic}/bin" />
				<copy todir="${dist-classic}/bin">
					<fileset dir="${bin}" />
				</copy>
			</then>
		</if>

		<!-- Copy the Javadoc -->
		<if>
			<istrue value="${do-javadoc}" />
			<then>
				<copy todir="${dist-classic}/docs/api">
					<fileset dir="${docs-api}" />
				</copy>
				<copy todir="${dist-classic}/docs/engine">
					<fileset dir="${docs-engine}" />
				</copy>
				<mkdir dir="${docs-ext}" />
				<copy todir="${dist-classic}/docs/ext">
					<fileset dir="${docs-ext}" />
				</copy>
			</then>
		</if>

		<!-- Copy text notes -->
		<copy file="${docs}/changes.txt" tofile="${dist-classic}/changes.txt" />
		<copy file="${tmpl}/text/copyright.txt" tofile="${dist-classic}/copyright.txt" />
		<copy file="dependencies.txt" tofile="${dist-classic}/lib/readme.txt">
			<filterset begintoken="@" endtoken="@" filtersfile="filterset.properties" />
		</copy>
		<copy file="${tmpl}/text/docs.txt" tofile="${dist-classic}/docs/readme.txt" />
		<copy file="${tmpl}/text/src.txt" tofile="${dist-classic}/src/readme.txt" />
		<copy file="${tmpl}/text/license.txt" tofile="${dist-classic}/license.txt" />
		<copy file="${tmpl}/text/readme.txt" tofile="${dist-classic}/readme.txt" />
		<copy file="${tmpl}/text/trademarks.txt" tofile="${dist-classic}/trademarks.txt" />

		<!-- Copy the build properties files. -->
		<copy todir="${dist-classic}/src">
			<fileset dir="${basedir}" includes="*.properties" />
		</copy>

		<!-- Packages libraries -->
		<for param="library" delimiter=" " list="${libraries-classic}">
			<sequential>
				<stageLibrary name="@{library}" />
			</sequential>
		</for>

		<!-- Package modules -->

		<!-- Complete the jar file with extra files -->
		<!-- @stage-extras@ -->
		<!-- @stage-modules@ -->
	</target>

	<target name="stage-maven" depends="stage-classic, stage-maven-2" if="do-maven" description="Generate the maven distributions." />

	<!-- STAGE-MAVEN-2 target -->
	<target name="stage-maven-2" if="do-maven" description="Generate the maven-2.x distributions.">
		<delete dir="${dist-maven2}" verbose="false" quiet="true" includeEmptyDirs="true" />
		<for param="module" delimiter=" " list="${modules}">
			<sequential>
				<maven2Module name="@{module}" />
			</sequential>
		</for>
		<for param="package" delimiter=" " list="${packages-maven}">
			<sequential>
				<maven2Library name="@{package}" />
			</sequential>
		</for>

		<!-- Add the parent pom -->
		<property name="mod-restlet-parent-version-maven" value="${version-maven}" />
		<propertyregex property="mod-restlet-parent-dir-maven-groupId" input="${parent-maven-groupId}" regexp="\." replace="/" global="true" casesensitive="false" />

		<!-- All files generated from the modules are stampped with the current full version number -->
		<property name="mod-dir-restlet-parent-maven2" value="${dist-maven2}/${mod-restlet-parent-dir-maven-groupId}/${parent-maven-artifactId}/${version-maven}" />
		<mkdir dir="${mod-dir-restlet-parent-maven2}" />

		<copy file="${poms}/${parent-maven-artifactId}.pom" tofile="${mod-dir-restlet-parent-maven2}/${parent-maven-artifactId}-${mod-restlet-parent-version-maven}.pom" overwrite="true" />
		<checksum file="${mod-dir-restlet-parent-maven2}/${parent-maven-artifactId}-${mod-restlet-parent-version-maven}.pom" algorithm="MD5" fileext=".md5" />
		<checksum file="${mod-dir-restlet-parent-maven2}/${parent-maven-artifactId}-${mod-restlet-parent-version-maven}.pom" algorithm="SHA" fileext=".sha1" />
	</target>

	<!-- STAGE-P2 target -->
	<target name="stage-p2" if="do-p2" description="Generate the p2 distribution." >
		<for param="module" delimiter=" " list="${modules-p2}">
			<sequential>
				<p22Module name="@{module}" />
			</sequential>
		</for>
		<for param="library" delimiter=" " list="${libraries-p2}">
			<sequential>
				<p22Library name="@{library}" />
			</sequential>
		</for>
	</target>
		
	<!-- PACKAGE target -->
	<target name="package" if="do-package" depends="package-classic, package-maven, package-p2" description="Generate the distribution.">
		<!-- copy final artifacts to the final distribution directory -->
		<move file="${dist-base}/restlet-${edition}-${version-compact}.zip" todir="${final-dist-base}" />
		<!-- do not fail on error if the exe does not exist in builds that didn't run the nsis task -->
		<move file="${dist-base}/restlet-${edition}-${version-compact}.exe" todir="${final-dist-base}" failonerror="false" />
	</target>

	<target name="package-classic" if="do-package" depends="package-classic-zip, package-classic-nsis" description="Generate the classic distributions.">
		<move todir="${final-dist-classic}">
			<fileset dir="${dist-classic}" />
		</move>
	</target>

	<target name="package-maven" if="do-package" description="Generate the maven distributions.">
		<move todir="${final-dist-maven2}">
			<fileset dir="${dist-maven2}" />
		</move>
	</target>

	<target name="package-p2" if="do-package-p2" description="Generate the p2 distributions.">
		<move todir="${final-dist-p2}">
			<fileset dir="${dist-p2}" />
		</move>
	</target>

	<!-- PACKAGE-ZIP target (generation of final Zip file) -->
	<target name="package-classic-zip" if="do-package" description="Generate the final zip file for the classic distribution.">
		<delete file="${dist-base}/restlet-${edition}-${version-compact}.zip" />
		<zip destfile="${dist-base}/restlet-${edition}-${version-compact}.zip" basedir="${dist-base}/classic" includes="${dist-path}/**/*" />
	</target>

	<!-- PACKAGE-NSIS target (generation of Windows installer) -->
	<target name="package-classic-nsis" if="do-nsis" description="Generate the windows installer for the classic distribution.">
		<nsis path="${nsis-makensis-path}" script="${temp}/setup.nsi" verbosity="2" uninstallfilelist="${dist-classic}/uninstall.log">
			<fileset dir="${dist-classic}" includes="**/*" />
		</nsis>
	</target>
	
</project>
